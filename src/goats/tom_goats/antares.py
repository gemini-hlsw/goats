# Standard library imports.
from typing import Any

# Related third party imports.
import antares_client
from crispy_forms.layout import Div, Fieldset, Layout, HTML
from django import forms
from django.forms.widgets import Textarea
from django.templatetags.static import static
import marshmallow
from tom_alerts.alerts import GenericQueryForm
from tom_antares.antares import ANTARESBroker

# Local application/library specific imports.


class GOATSANTARESBrokerForm(GenericQueryForm):
    """A Django form class that extends ``ANTARESBrokerForm``.

    Attributes
    ----------
    esquery : `JSONField`
        A JSON field required for receiving Elastic Search queries.
    """

    esquery = forms.JSONField(
        required=False,
        label="Elastic Search query in JSON format",
        widget=Textarea(attrs={
            "rows": 10,
            "id": "esquery"
        }),
        initial={}
    )

    class Media:
        # Incorporating additional JavaScript file.
        js = (static("js/esquery.js"), )

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # Defining layout and helper configurations along with initializing
        # URLs for images.
        self.common_layout = Layout('broker')
        antares_img_url = static('img/antares.png')
        chrome_img_url = static('img/chrome.png')
        safari_img_url = static('img/safari.png')
        firefox_img_url = static('img/firefox.png')
        self.helper.layout = Layout(
            self.common_layout,
            HTML('''
                <p>
                Users can query objects in the ANTARES database using one of the following
                two methods: <br><br>1. Using the antares2goats Browser Extension (recommended).<br>2.
                An advanced
                query with Elastic Search syntax.
            </p>
            '''),
            HTML('<hr/><p style="font-size: 1.5rem;">Using the ANTARES portal with antares2goats</p>'),
            Div(
                Div(
                    HTML(f'''
                         <p>Click the image to open ANTARES in a new tab.</p>
                         <a href="https://antares.noirlab.edu/" target="_blank">
                         <img src="{antares_img_url}" alt="ANTARES Portal" class="img-fluid shadow-sm">
                         </a>
                    '''),
                    css_class='col-md-7'
                ),
                Div(
                    HTML(f'''
                        <p>Install antares2goats from browser extension store:</p>
                        <a href="https://chrome.google.com/webstore/" target="_blank"><img
                        src="{chrome_img_url}" alt="Chrome Extension Store" class="img-fluid"
                        style="display: inline-block; max-height: 50px; margin-right: 1.5%;"/></a>
                        <a href="https://safari-extensions.apple.com/" target="_blank"><img
                        src="{safari_img_url}" alt="Safari Extension Store" class="img-fluid"
                        style="display: inline-block; max-height: 50px; margin-right: 1.5%;"/></a>
                        <a href="https://addons.mozilla.org/" target="_blank">
                        <img src="{firefox_img_url}" alt="Firefox Extension Store" class="img-fluid"
                        style="display: inline-block; max-height: 50px;"/></a>
                        <p>Configure extension by providing an API token generated by your Admin.</p>
                    '''),
                    css_class='col-md-5'
                ),
                css_class="row"
            ),
            HTML('<hr>'),
            Div(
                Fieldset(
                    'Elastic Search Query',
                    'query_name',
                    'esquery'
                ),
                HTML('''
                    <p>
                    Please see <a href="https://noao.gitlab.io/antares/client/tutorial/searching.html">ANTARES
                    Documentation</a> for a detailed description of advanced searches.
                    </p>
                '''),
                css_class='col'
            ),
        )

    def clean(self):
        """Cleans the data of the "esquery" field and validates it.

        Returns
        -------
        `dict`
            The cleaned data of the form.

        Raises
        ------
        forms.ValidationError
            Raised if the "esquery" field is empty.
        """
        cleaned_data = super().clean()
        if not cleaned_data.get('esquery'):
            raise forms.ValidationError(
                'Invalid entry for Elastic Search query form.'
            )

        return cleaned_data


class GOATSANTARESBroker(ANTARESBroker):
    """Extends the ANTARESBroker.

    Attributes
    ----------
    form : `GOATSANTARESBrokerForm`
        The form class to be used within the broker.
    """

    form = GOATSANTARESBrokerForm

    def fetch_alerts(self, parameters: dict[str, Any]) -> iter:
        """Fetches alerts from user input.

        Parameters
        ----------
        parameters : `dict[str, Any]`
            The parameters to use to query.

        Returns
        -------
        `iter`
            An iterator of alerts.
        """
        esquery = parameters.get('esquery')
        locusid = parameters.get('locusid')
        # TODO: Determine max alerts.
        max_alerts = 20
        alerts = []
        if locusid:
            # Fetch alert by locus ID.
            locus = antares_client.search.get_by_id(locusid)
            alerts.append(self.alert_to_dict(locus))

        elif esquery:
            # Set query parameter.
            query = esquery
            # Initiate search with the given query.
            loci = antares_client.search.search(query)

            while len(alerts) < max_alerts:
                try:
                    locus = next(loci)
                except (marshmallow.exceptions.ValidationError, StopIteration):
                    # Break the loop if there is a validation error
                    # or no more items in the iterator.
                    break
                alerts.append(self.alert_to_dict(locus))

        return iter(alerts)
