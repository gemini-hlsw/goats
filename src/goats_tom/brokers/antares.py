__all__ = ["ANTARESBrokerForm", "ANTARESBroker"]

from typing import Any, Iterator

import antares_client
import marshmallow
from astropy.time import Time, TimezoneInfo
from crispy_forms.layout import HTML, Div, Fieldset, Layout
from django import forms
from django.forms.widgets import Textarea
from django.templatetags.static import static
from tom_alerts.alerts import GenericAlert, GenericBroker, GenericQueryForm
from tom_targets.models import BaseTarget, Target, TargetName

ANTARES_BASE_URL = "https://antares.noirlab.edu"


class ANTARESBrokerForm(GenericQueryForm):
    """A Django form class.

    Attributes
    ----------
    query : `JSONField`
        A JSON field required for receiving Elastic Search queries.

    """

    query = forms.JSONField(
        required=False,
        label="Elastic Search query in JSON format",
        widget=Textarea(attrs={"rows": 10}, ),
        initial={"query":{}},
    )

    class Media:
        # Incorporating additional JavaScript file.
        js = (static("js/query.js"),)

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # Defining layout and helper configurations along with initializing
        # URLs for images.
        self.common_layout = Layout("broker")
        antares_img_url = static("img/antares.png")
        chrome_img_url = static("img/chrome.png")
        firefox_img_url = static("img/firefox.png")
        firefox_extension_url = (
            "https://addons.mozilla.org/en-US/firefox/addon/antares2goats/"
        )
        chrome_extension_url = "https://chromewebstore.google.com/detail/antares2goats/nmnbkpfjnpachfajklpjimbdpkoebcba"

        # ruff: noqa: E501
        self.helper.layout = Layout(
            self.common_layout,
            HTML(
                """
                <p>
                Users can query objects in the ANTARES database using one of the following
                two methods: <br><br>1. Using the antares2goats Browser Extension (recommended).<br>2.
                An advanced
                query with Elastic Search syntax.
            </p>
            """,
            ),
            HTML(
                '<hr/><p style="font-size: 1.5rem;">Using the ANTARES portal with antares2goats</p>',
            ),
            Div(
                Div(
                    HTML(
                        f"""
                         <p>Click the image to open ANTARES in a new tab.</p>
                         <a href="https://antares.noirlab.edu/" target="_blank">
                         <img src="{antares_img_url}" alt="ANTARES Portal" class="img-fluid shadow-sm">
                         </a>
                    """,
                    ),
                    css_class="col-md-7",
                ),
                Div(
                    HTML(
                        f"""
                        <p>Install antares2goats from browser extension store:</p>
                        <a href="{chrome_extension_url}" target="_blank">
                        <img src="{chrome_img_url}" alt="Chrome Extension Store" class="img-fluid"
                        style="display: inline-block; max-height: 50px;"></a>
                        <a href="{firefox_extension_url}" target="_blank">
                        <img src="{firefox_img_url}" alt="Firefox Extension Store" class="img-fluid"
                        style="display: inline-block; max-height: 50px;"></a>
                        <p>Configure extension by providing an API token generated by your Admin.</p>
                    """,
                    ),
                    css_class="col-md-5",
                ),
                css_class="row",
            ),
            HTML("<hr>"),
            Div(
                Fieldset("Elastic Search Query", "query_name", "query"),
                HTML(
                    """
                    <p>
                    Please see <a href="https://noao.gitlab.io/antares/client/tutorial/searching.html">ANTARES
                    Documentation</a> for a detailed description of advanced searches.
                    </p>
                """,
                ),
                css_class="col",
            ),
        )
        # ruff: enable

    def clean(self):
        """Cleans the data of the "query" field and validates it.

        Returns
        -------
        `dict`
            The cleaned data of the form.

        Raises
        ------
        forms.ValidationError
            Raised if the "query" field is empty.

        """
        cleaned_data = super().clean()
        print("CLEAN ", cleaned_data)
        if not cleaned_data.get("query"):
            raise forms.ValidationError("Invalid entry for Elastic Search query form.")

        return cleaned_data


class ANTARESBroker(GenericBroker):
    """Extends the ANTARESBroker.

    Attributes
    ----------
    form : `GOATSANTARESBrokerForm`
        The form class to be used within the broker.

    """

    name = "ANTARES"
    form = ANTARESBrokerForm

    @classmethod
    def alert_to_dict(cls, locus) -> dict[str, Any]:
        """Serializes a Locus object into a dictionary for caching in the view.

        Parameters
        ----------
        locus : `Locus`
            The Locus object returned by the ANTARES API.

        Returns
        -------
        `dict`
            A dictionary representation of the Locus object.
        """
        return {
            "locus_id": locus.locus_id,
            "ra": locus.ra,
            "dec": locus.dec,
            "properties": locus.properties,
            "tags": locus.tags,
            # 'lightcurve': locus.lightcurve.to_json(),
            "catalogs": locus.catalogs,
            "alerts": [
                {
                    "alert_id": alert.alert_id,
                    "mjd": alert.mjd,
                    "properties": alert.properties,
                }
                for alert in locus.alerts
            ],
        }

    def fetch_alerts(self, parameters: dict[str, Any]) -> Iterator[dict[str, Any]]:
        """Fetches alerts based on user input.

        Parameters
        ----------
        parameters : `dict[str, Any]`
            Query parameters containing either a query string or a locus ID.

        Returns
        -------
        `Iterator[dict[str, Any]]`
            An iterator of alert dictionaries.
        """
        query = parameters.get("query")
        locusid = parameters.get("locusid")
        max_alerts = 40
        alerts = []

        if locusid:
            # Fetch alert by locus ID.
            locus = antares_client.search.get_by_id(locusid)
            alerts.append(self.alert_to_dict(locus))

        elif query:
            # Set query parameter.
            # Initiate search with the given query.
            loci = antares_client.search.search(query)

            while len(alerts) < max_alerts:
                try:
                    locus = next(loci)
                except (marshmallow.exceptions.ValidationError, StopIteration):
                    # Break the loop if there is a validation error or no more items in
                    # the iterator.
                    break
                alerts.append(self.alert_to_dict(locus))

        return iter(alerts)

    def to_target(
        self, alert: dict[str, Any]
    ) -> tuple[BaseTarget, list, list[TargetName]]:
        """Converts an alert dictionary into a Target object and associated aliases.

        Parameters
        ----------
        alert : `dict[str, Any]`
            The alert data containing target details.

        Returns
        -------
        `tuple[BaseTarget, list, list[TargetName]]`
            A tuple containing the created `BaseTarget`, an empty list, and a list of
            aliases.
        """
        target = Target.objects.create(
            name=alert["properties"]["ztf_object_id"],
            type="SIDEREAL",
            ra=alert["ra"],
            dec=alert["dec"],
        )
        aliases = [TargetName(target=target, name=alert["locus_id"])]

        horizons_name = alert["properties"].get("horizons_targetname")
        if horizons_name is not None:
            aliases.append(TargetName(name=horizons_name))

        return target, [], aliases

    def to_generic_alert(self, alert: dict[str, Any]) -> GenericAlert:
        """Converts an alert dictionary into a `GenericAlert` object.

        Parameters
        ----------
        alert : `dict[str, Any]`
            The alert data to be converted.

        Returns
        -------
        `GenericAlert`
            The corresponding GenericAlert object.
        """
        url = f'{ANTARES_BASE_URL}/loci/{alert["locus_id"]}'
        timestamp = Time(
            alert["properties"].get("newest_alert_observation_time"),
            format="mjd",
            scale="utc",
        ).to_datetime(timezone=TimezoneInfo())

        return GenericAlert(
            timestamp=timestamp,
            url=url,
            id=alert["locus_id"],
            name=alert["properties"]["ztf_object_id"],
            ra=alert["ra"],
            dec=alert["dec"],
            mag=alert["properties"].get("newest_alert_magnitude", ""),
            score=alert["alerts"][-1]["properties"].get("ztf_rb", ""),
        )
